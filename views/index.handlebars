<style>
  
  div[data-note-id] {
    display: flex;
    flex-flow: row nowrap;
  }

  .notesList {
    display: flex;
    flex-flow: row wrap;
  }

</style>


<button id="scrape_btn">Scrape</button>

<h1>Articles</h1>

<div>
  {{#each articles}}
    <h3>{{title}}</h3>
    <p>{{summary}}</p>
    <a href="{{link}}">Link to Blog Post</a>
    <br>

    <div data-article-id={{postID}}>

      <input type="text" onblur="this.value = this.value.trim()">
      <button class="addNote_btn">Add a Note</button>

      <div class="notesList">
        {{#each notes}}
          <div data-note-id={{this._id}}>
            <p>{{body}}</p>
            <button class="delNote_btn">X</button>
          </div>
        {{else}}
          <p>There are no Notes for this Article!</p>
        {{/each}}
      </div>

    </div>

  {{else}}
    <p>There are no Articles!</p>
  {{/each}}
</div>



<script>

  const $ID = {
    scrape_btn: null,
  }
  Object.keys($ID).forEach(id => $ID[id] = document.getElementById(id));

  const $CLASS = {
    addNote_btn: null,
    delNote_btn: null
  }
  Object.keys($CLASS).forEach(cl => $CLASS[cl] = document.getElementsByClassName(cl));

  const $DATA = {
    articleId: 'data-article-id',
       noteId: 'data-note-id'
  }

  //* scrape button click
  $ID.scrape_btn.onclick = function ({ target } = {}) {

    target.setAttribute('disabled', ""); // will be re-enabled on successful reload

    fetch('/scrape')

      .then(async response => {
        if (response.ok) {
          await response.json();
          location.reload();
        }
        else throw response;
      })

      .catch(error => {
        target.removeAttribute('disabled');
        console.error("fetch /scrape error", error)
      })

  } 


  //* addNote (class) click
  Array.from($CLASS.addNote_btn, v => v.addEventListener('click',

    function ({ target } = {}) {

      if (!target) return;

      const articleIdEl = target.closest(`[${$DATA.articleId}]`);
      if (!articleIdEl) return;

      const postID = articleIdEl.dataset.articleId;
      const inputEl = articleIdEl.querySelector('input');

      const body = inputEl && inputEl.value.trim();
      inputEl.value = body.trim();

      if (!body || !postID) return;
    

      fetch(`/articles/${postID}`,
        {
          method: 'POST',
          body: JSON.stringify({body}),
          headers: { 'Content-Type': 'application/json' }
        })

        .then(async response => {
          if (response.ok) {
            console.log('ok', await response.json());

            {{!-- location.reload(); --}}
            inputEl.value = "";
          }
          else throw response;
        })

        .catch(error => console.error("fetch /articles POST error", error));
    }

  ));

  //* delNote (class) click
  Array.from($CLASS.delNote_btn, v => v.addEventListener('click', 

    function ({ target } = {}) {
      console.log("delnotebtn", target);

      if (!target) return;

      const    noteIdEl = target.closest(`[${$DATA.   noteId}]`);
      const articleIdEl = target.closest(`[${$DATA.articleId}]`);
      if (!noteIdEl || !articleIdEl) return;

      const _id = noteIdEl.dataset.noteId;
      const postID = articleIdEl.dataset.articleId;
      if (!postID || !_id) return;


      fetch(`/notes/${_id}`,
        {
          method: 'DELETE',
          body: JSON.stringify({ postID }),
          headers: { 'Content-Type': 'application/json' }
        })

        .then(async response => {
          if (response.ok) {
            console.log('ok', await response.json());

            {{!-- location.reload(); --}}
            {{!-- inputEl.value = ""; --}}
          }
          else throw response;
        })

        .catch(error => console.error("fetch /notes/delete error", error));
    }  

  ));

</script>