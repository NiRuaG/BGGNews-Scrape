<style>
  .notesList,
  .notesList .btn {
    font-size: small;
  }

  .noselect {
    user-select: none;
     -moz-user-select: none;
  }

  .card-body img {
    max-width: 20%;
    float: left;
  }
</style>

<div id="home" class="bg-light text-dark">
  

  <div class="text-center sticky-top bg-info py-2 border-bottom shadow">
    <button id="scrape_btn" class="btn btn-info"><i class="far fa-newspaper"></i> Scrape</button>
    <button id= "clear_btn" class="btn btn-info"><i class="far fa-trash-alt"></i> Clear</button>
    <h1 class="text-center noselect">BGG News Articles</h1>
  </div>

  <div id="articlesList" class="container px-sm-0">
    {{#each articles}}
      <div data-article-id={{postID}} class="row justify-content-center">
        <div class="card col-12 col-md-9 px-0 my-3 shadow-lg">
      
          <div class="card-header bg-dark text-light">{{title}}</div>
      
          <div class="card-body py-1">
            <img src={{imgURL}} class="pr-1" alt="article image">
      
            <p class="card-text">{{summary}}</p>
            <div style="clear: both;"></div>

            <a href={{link}} class="card-link small" target="_blank" rel="noopener noreferrer">
              Link to Source
            </a>
      
            <div class="notesList d-flex flex-row flex-wrap my-1">
              {{#each notes}}
                <div data-note-id={{this._id}} class="d-flex flex-nowrap border border-info rounded mr-2 mb-2 p-1">
                  <p class="mb-0 px-2">{{body}}</p>
                  <button class="btn btn-outline-danger p-0 px-1 delNote_btn">&cross;</button>
                </div>
              {{else}}
                <p class="mb-0"><em>There are no Notes for this Article!</em></p>
              {{/each}}
            </div>
      
          </div>

          <div class="card-footer p-2 bg-info">
            <form class="addNote_form">
              <input type="text" class="w-100" placeholder="Add a Note" onblur="this.value = this.value.trim()">
            </form>
          </div>

        </div>
      </div>
    {{else}}
      <p class="text-center">There are no Articles.  Hit the [Scrape] button at the top!</p>
    {{/each}}
  </div>
</div>


<script>

  const $ID = {
    scrape_btn: null,
    clear_btn: null,
    articlesList: null
  }
  Object.keys($ID).forEach(id => $ID[id] = document.getElementById(id));

  const $CLASS = {
    delNote_btn : null,
    addNote_form: null
  }
  Object.keys($CLASS).forEach(cl => $CLASS[cl] = document.getElementsByClassName(cl));

  const $DATA = {
    articleId: 'data-article-id',
       noteId: 'data-note-id'
  }


  //* clear button click
  $ID.clear_btn.onclick = function() {

    fetch(`/articles`,
      {
        method: 'DELETE',
      })

      .then(async response => {
        if (response.ok) {
          await response.json();

          location.reload();
        }
        else throw response;
      })

      .catch(async error => console.error("fetch /articles DELETE error", error, error.text && await error.text()));
  }

  //* scrape button click
  $ID.scrape_btn.onclick = function ({ target } = {}) {
    
    while ($ID.articlesList.firstChild) {
      $ID.articlesList.removeChild($ID.articlesList.firstChild);
    }

    target.setAttribute('disabled', ""); // will be re-enabled on successful reload
    target.classList.add('disabled');
    target.classList.replace('btn-info', 'btn-dark');

    fetch('/scrape')

      .then(async response => {
        if (response.ok) {
          await response.json();
          location.reload();
        }
        else throw response;
      })

      .catch(async error => {
        console.error("fetch /scrape error", error, error.text && await error.text());
        location.reload();
      })

  }


  //* addNote submits
  Array.from($CLASS.addNote_form, v => v.addEventListener('submit',

    function (event) {
      event.preventDefault();
      const { target } = event;

      if (!target) return;

      const articleIdEl = target.closest(`[${$DATA.articleId}]`);
      if (!articleIdEl) return;

      const postID = articleIdEl.dataset.articleId;
      const inputEl = articleIdEl.querySelector('input');

      const body = inputEl && inputEl.value.trim();
      inputEl.value = body.trim();

      if (!body || !postID) return;
    

      fetch(`/articles/${postID}`,
        {
          method: 'POST',
          body: JSON.stringify({body}),
          headers: { 'Content-Type': 'application/json' }
        })

        .then(async response => {
          if (response.ok) {
            await response.json();
            inputEl.value = "";
            location.reload();
          }
          else throw response;
        })

        .catch(async error => console.error("fetch /articles POST error", error, error.text && await error.text()));
    }

  ));


  //* delNote (class) click
  Array.from($CLASS.delNote_btn, v => v.addEventListener('click', 

    function ({ target } = {}) {

      if (!target) return;

      const    noteIdEl = target.closest(`[${$DATA.   noteId}]`);
      const articleIdEl = target.closest(`[${$DATA.articleId}]`);
      if (!noteIdEl || !articleIdEl) return;

      const _id = noteIdEl.dataset.noteId;
      const postID = articleIdEl.dataset.articleId;
      if (!postID || !_id) return;


      fetch(`/notes/${_id}`,
        {
          method: 'DELETE',
          body: JSON.stringify({ postID }),
          headers: { 'Content-Type': 'application/json' }
        })

        .then(async response => {
          if (response.ok) {
            await response.json();

            location.reload();
          }
          else throw response;
        })

        .catch(error => console.error("fetch /notes DELETE error", error));
    }  

  ));

</script>